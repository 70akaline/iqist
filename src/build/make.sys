##
##
## Introduction
## ============
##
## This is the official configuration file for the building system. You
## should modify it to fulfill your requirements. The make.sys file is
## the key component of the building system. If it is not configured
## correctly, the building system won't work correctly as well. So please
## read the following comments carefully.
##
## Warning
## =======
##
## Be careful! This file may be not suitable for your situation. It is
## designed for my own hardware and software environment only. Please
## check it and improve it before starting to compile your iqist code.
##
## Requirements
## ============
##
## Operation system
## ----------------
## * Linux
## * Mac OS X
##
## Fortran compiler
## ----------------
## * Intel Fortran Compiler
## * GNU gfortran
##
## Linear algebra library
## ----------------------
## * OpenBLAS
## * Intel Math Kernel Library
## * Reference implementation at Netlib
## * Apple Accelerate/vecLib framework
##
## MPI environment
## ---------------
## * MPICH
## * Openmpi
##
## OpenMP environment
## ------------------
## * Optional
##
## Python environment
## ------------------
## * numpy, scipy, matplotlib, mpi4py, f2py
##
## LaTeX environment
## -----------------
## * MacTeX
## * TeXlive
##
## Though it is not mandatory, we still strongly recommend to update the
## above software components on your systems to the latest versions.
##
## Explanations
## ============
##
## F90
## ---
##
## The Fortran compiler. The parallel and sequential fortran compilers are
## both supported. Note that only the Intel fortran compiler and the GNU
## gfortran compiler were tested. And we recommend to use the very latest
## version of Intel fortran compiler (i.e, Intel Fortran Composer XE 2013
## or Intel Parallel Studio 2015).
##
## Possible opinions:
## * mpif90
## * mpifort
## * mpiifort
## * ifort
## * gfortran
## * and so on. 
##
## LINKER
## ------
##
## Linker. Here it should be the same with compiler. Do not change it.
##
## Possible opinions:
## * $(F90)
##
## ARCHIVER
## --------
##
## Archiver. It is used to pack the objects into a library. Do not modify
## it for ever.
##
## Possible opinions:
## * 'ar -ruv'
##
## MPI
## ---
##
## Specify whether MPI is enable. If you want to compile a sequential code,
## please comment it out with '#' symbol and then setup F90 to 'ifort' or
## 'gfortran'. We strongly suggest to compile the MPI parallelized codes.
##
## Possible opinions:
## * -DMPI
##
## OMP
## ---
##
## Specify whether OpenMP is enable. If you want to disable it, please
## comment it out. In default it is disabled. So far OpenMP was used by
## some ctqmc components to speedup the measurements of some selected
## two-particle quantities.
##
## Possible opinions:
## * -openmp
## * -fopenmp
##
## Note that if you are using the Intel fortran compiler, this opinion
## should be '-openmp'. On the other hand, if the GNU gfortran compiler
## is used, this opinion should be '-fopenmp'.
##
## API
## ---
##
## Specify whether we want to obtain a library version of iqist. If it is
## enabled, what you can obtain is a library and you can write python or
## fortran codes to use it, instead of a standard executable program. In
## default it is disabled.
##
## Possible opinions:
## * -DAPI
## * -DMPY
##
## If only the API macro is defined, the Fortran API will be generated.
## If both the API and MPY macros are defined, the Python API and the
## (slightly different) Fortran API will be generated. If only the MPY
## macro is defined, it is invalid.
##
## FPP
## ---
##
## Specify whether the fortran preprocessor (FPP) is used. It has to be
## enabled or else the iqist can not be compiled correctly.
##
## Possible opinions:
## * -fpp
## * -cpp
##
## Note that if you are using the Intel fortran compiler, this opinion
## should be '-fpp'. On the other hand, if the GNU gfortran compiler is
## used, this opinion should be '-cpp'.
##
## CPP
## ---
##
## Collection of preprocessor directives. Do not modify it unless you are
## an expert of iqist.
##
## Possible opinions:
## * $(FPP)
## * $(MPI)
## * $(OMP)
## * $(API)
## 
## Note that the '$(FPP)' opinion is necessary.
##
## GPROF
## -----
##
## Specify whether the code profiling should be done. If it is enabled,
## then after the code is finished, a gmon.out file will be generated.
## Then you can use the gprof tool to analyze the runtime information and
## figure out the hotspot of the code. It is not a good idea to enable it
## to build a production code, because it will decrease the efficiency
## greatly.
##
## Possible opinions:
## * -p
## * -pg
##
## Note the '-p' opinion is useful for the GNU gfortran compiler, while
## the '-pg' opinion is useful for the Intel fortran compiler.
##
## CHECK
## -----
##
## Used to specify what types of check should be done.
##
## Possible opinions:
## * -warn all
## * -check all
## * -traceback
## * -g
## * -Wall -Wunused -Wextra
## * -fcheck=all
## * -fbacktrace
##
## If you are using the Intel fortran compiler, the '-warn all' opinion
## means the check is done in compiling. The '-check all' opinion means
## the check will be done in running. The '-traceback' opinion enables
## us to track the exact position (line number and file name) where the
## error occurs. The '-g' opinion enables the compiler to generate debug
## information and embed them into the final program. Note that all of
## the '-check all', '-traceback', and '-g' opinions will decrease the
## efficiency greatly.
##
## If you are using the GNU gfortran compiler, the '-Wall' opinion will
## enable most warning messages. The '-Wunused' opinion will enable all
## -Wunused- warnings, such the as the '-Wunused-parameter' opinion, etc.
## The '-Wextra' opinion will print some extra warnings (sometimes they
## are unwanted). The '-fcheck=all' opinion will specify that all of the
## runtime checks are to be performed. The '-fbacktrace' opinion will
## produce a backtrace when a runtime error is encountered. Finally, the
## '-g' opinion will enable the compiler to generate debug information
## and embed them into the final program.
##
## CDUMP
## -----
##
## Specify whether the fortran compiler will output useful optimization
## information during the compiling process.
##
## Possible opinions:
##
## LEVEL
## -----
##
## Collection of optimization opinions.
##
## Possible opinions:
## '-O3' means the highest optimization.
## '-xHost' enables the compiler to generate the most suitable code for the
## current computer architecture. '-unroll-aggressive' means using aggressive
## method to unroll the loop structures. '-align all' means to align the
## arrays, structures, etc. '-fPIC' means to generate position independent
## code  for the purpose of dynamic link. It should be enabled to compile
## the python API. Please modify them only if you are an expert of the Intel
## Fortran Compiler and you know what you are doing.
##
## MARCH
## -----
##
## Used to specify the instruction sets that the current system can support.
## 'core2' is the safest choice and it works always. But it may be not the
## best. Please modify it only when you understand what you are doing.
##
## FFLAGS
## ------
##
## Collection of Fortran compiler opinions. Do not modify them for ever.
##
## LFLAGS
## ------
##
## Collection of linker opinions. '-Wl,-no_pie' is useful when you are
## using Mac Os X system. Do not modify them unless you know what you
## are doing.
##
## LIBS
## ----
##
## Specify the external libraries. Now the iqist software package depends
## on LAPACK and BLAS heavily. To achieve good performance, the highly
## optimized LAPACK and BLAS implementations are essential. Here we want
## to recommend the OpenBLAS and Intel MKL.
##
## MPIL
## ----
##
## Specify the external mpi libraries for fortran binding. It is useful
## when you are compiling the python application programming interface
## using f2py (pyiqist and pydaisy). The f2py will automatically use the
## 'bare' intel fortran compiler (ifort) to link and generate the python
## modules (*.so). If you do not specify MPIL, then the python modules
## will not work properly.
##
## Author
## ======
##
## This building system is designed, created, implemented, and maintained by
##
## Li Huang // email: huangli712@gmail.com
##
## History
## =======
##
## 05/10/2015 by li huang
##
##

# Fortran compiler, linker, and archiver
#-------------------------------------------------------------------------
F90    = mpifort
LINKER = $(F90)
ARCHIVER = ar -ruv

# Fortran preprocessor options
#-------------------------------------------------------------------------
MPI    = -DMPI
OMP    = #-fopenmp
API    = -DAPI -DMPY
FPP    = -cpp
CPP    = $(FPP) $(MPI) $(OMP) $(API)

# Machine tuning options
#-------------------------------------------------------------------------
GPROF  = #-p
CHECK  = -Wall -Wunused -Wextra #-fbacktrace -fcheck=all -g
CDUMP  = -fopt-info
LEVEL  = -Ofast -faggressive-loop-optimizations -fno-tree-pre -fPIC
MARCH  = -msse4

# Flags for fortran compiler and linker
#-------------------------------------------------------------------------
FFLAGS = -c $(CPP) $(CHECK) $(CDUMP) $(LEVEL) $(MARCH) $(GPROF)
LFLAGS = $(OMP) $(GPROF)

# External linear algebra library
#-------------------------------------------------------------------------
LIBS   = -framework Accelerate

# F2py tools configuration
#-------------------------------------------------------------------------
F2PY   = f2py-2.7
F2PYC  = $(F90)
F2PYL  = --link-lapack_opt
